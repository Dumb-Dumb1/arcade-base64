<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="0$(}.,C7Qh=kh/.?%X95" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="?wEt%bAAi5-_cfsxj$Be"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace u8x3 {" line1="    const base64Chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;" line2="" line3="    /**" line4="     * Encode a string into Base64 format" line5="     */" line6="    //% block=&quot;base64 encode %text&quot;" line7="    export function e1(text: string): string {" line8="        let output = &quot;&quot;" line9="        let i = 0" line10="        while (i &lt; text.length) {" line11="            const chr1 = text.charCodeAt(i++)" line12="            const chr2 = i &lt; text.length ? text.charCodeAt(i++) : NaN" line13="            const chr3 = i &lt; text.length ? text.charCodeAt(i++) : NaN" line14="" line15="            const enc1 = chr1 &gt;&gt; 2" line16="            const enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4)" line17="            const enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6)" line18="            const enc4 = chr3 &amp; 63" line19="" line20="            if (isNaN(chr2)) {" line21="                output += base64Chars.charAt(enc1) + base64Chars.charAt(enc2) + &quot;==&quot;" line22="            } else if (isNaN(chr3)) {" line23="                output += base64Chars.charAt(enc1) + base64Chars.charAt(enc2) + base64Chars.charAt(enc3) + &quot;=&quot;" line24="            } else {" line25="                output += base64Chars.charAt(enc1) + base64Chars.charAt(enc2) + base64Chars.charAt(enc3) + base64Chars.charAt(enc4)" line26="            }" line27="        }" line28="        return output" line29="    }" line30="" line31="    /**" line32="     * Decode a Base64-encoded string back to text" line33="     */" line34="    //% block=&quot;base64 decode %b64&quot;" line35="    export function d2(b64: string): string {" line36="        // manually strip invalid chars" line37="        let cleaned = &quot;&quot;" line38="        for (let ch of b64) {" line39="            if (base64Chars.indexOf(ch) &gt;= 0 || ch == &quot;=&quot;) cleaned += ch" line40="        }" line41="        b64 = cleaned" line42="" line43="        let output2 = &quot;&quot;" line44="        let j = 0" line45="        while (j &lt; b64.length) {" line46="            const enc12 = base64Chars.indexOf(b64.charAt(j++))" line47="            const enc22 = base64Chars.indexOf(b64.charAt(j++))" line48="            const enc32 = base64Chars.indexOf(b64.charAt(j++))" line49="            const enc42 = base64Chars.indexOf(b64.charAt(j++))" line50="" line51="            const chr12 = (enc12 &lt;&lt; 2) | (enc22 &gt;&gt; 4)" line52="            const chr22 = ((enc22 &amp; 15) &lt;&lt; 4) | (enc32 &gt;&gt; 2)" line53="            const chr32 = ((enc32 &amp; 3) &lt;&lt; 6) | enc42" line54="" line55="            output2 += String.fromCharCode(chr12)" line56="            if (enc32 != 64) output2 += String.fromCharCode(chr22)" line57="            if (enc42 != 64) output2 += String.fromCharCode(chr32)" line58="        }" line59="        return output2" line60="    }" line61="}" numlines="62"></mutation></block></statement></block></xml>